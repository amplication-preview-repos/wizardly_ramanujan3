/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Modem as PrismaModem,
  SimCard as PrismaSimCard,
} from "@prisma/client";

export class ModemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ModemCountArgs, "select">): Promise<number> {
    return this.prisma.modem.count(args);
  }

  async modems(args: Prisma.ModemFindManyArgs): Promise<PrismaModem[]> {
    return this.prisma.modem.findMany(args);
  }
  async modem(args: Prisma.ModemFindUniqueArgs): Promise<PrismaModem | null> {
    return this.prisma.modem.findUnique(args);
  }
  async createModem(args: Prisma.ModemCreateArgs): Promise<PrismaModem> {
    return this.prisma.modem.create(args);
  }
  async updateModem(args: Prisma.ModemUpdateArgs): Promise<PrismaModem> {
    return this.prisma.modem.update(args);
  }
  async deleteModem(args: Prisma.ModemDeleteArgs): Promise<PrismaModem> {
    return this.prisma.modem.delete(args);
  }

  async findSimCards(
    parentId: string,
    args: Prisma.SimCardFindManyArgs
  ): Promise<PrismaSimCard[]> {
    return this.prisma.modem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .simCards(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Modem } from "./Modem";
import { ModemCountArgs } from "./ModemCountArgs";
import { ModemFindManyArgs } from "./ModemFindManyArgs";
import { ModemFindUniqueArgs } from "./ModemFindUniqueArgs";
import { CreateModemArgs } from "./CreateModemArgs";
import { UpdateModemArgs } from "./UpdateModemArgs";
import { DeleteModemArgs } from "./DeleteModemArgs";
import { SimCardFindManyArgs } from "../../simCard/base/SimCardFindManyArgs";
import { SimCard } from "../../simCard/base/SimCard";
import { ModemService } from "../modem.service";
@graphql.Resolver(() => Modem)
export class ModemResolverBase {
  constructor(protected readonly service: ModemService) {}

  async _modemsMeta(
    @graphql.Args() args: ModemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Modem])
  async modems(@graphql.Args() args: ModemFindManyArgs): Promise<Modem[]> {
    return this.service.modems(args);
  }

  @graphql.Query(() => Modem, { nullable: true })
  async modem(
    @graphql.Args() args: ModemFindUniqueArgs
  ): Promise<Modem | null> {
    const result = await this.service.modem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Modem)
  async createModem(@graphql.Args() args: CreateModemArgs): Promise<Modem> {
    return await this.service.createModem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Modem)
  async updateModem(
    @graphql.Args() args: UpdateModemArgs
  ): Promise<Modem | null> {
    try {
      return await this.service.updateModem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Modem)
  async deleteModem(
    @graphql.Args() args: DeleteModemArgs
  ): Promise<Modem | null> {
    try {
      return await this.service.deleteModem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SimCard], { name: "simCards" })
  async findSimCards(
    @graphql.Parent() parent: Modem,
    @graphql.Args() args: SimCardFindManyArgs
  ): Promise<SimCard[]> {
    const results = await this.service.findSimCards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ModemService } from "../modem.service";
import { ModemCreateInput } from "./ModemCreateInput";
import { Modem } from "./Modem";
import { ModemFindManyArgs } from "./ModemFindManyArgs";
import { ModemWhereUniqueInput } from "./ModemWhereUniqueInput";
import { ModemUpdateInput } from "./ModemUpdateInput";
import { SimCardFindManyArgs } from "../../simCard/base/SimCardFindManyArgs";
import { SimCard } from "../../simCard/base/SimCard";
import { SimCardWhereUniqueInput } from "../../simCard/base/SimCardWhereUniqueInput";

export class ModemControllerBase {
  constructor(protected readonly service: ModemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Modem })
  async createModem(@common.Body() data: ModemCreateInput): Promise<Modem> {
    return await this.service.createModem({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        model: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Modem] })
  @ApiNestedQuery(ModemFindManyArgs)
  async modems(@common.Req() request: Request): Promise<Modem[]> {
    const args = plainToClass(ModemFindManyArgs, request.query);
    return this.service.modems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        model: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Modem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async modem(
    @common.Param() params: ModemWhereUniqueInput
  ): Promise<Modem | null> {
    const result = await this.service.modem({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        model: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Modem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateModem(
    @common.Param() params: ModemWhereUniqueInput,
    @common.Body() data: ModemUpdateInput
  ): Promise<Modem | null> {
    try {
      return await this.service.updateModem({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          model: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Modem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteModem(
    @common.Param() params: ModemWhereUniqueInput
  ): Promise<Modem | null> {
    try {
      return await this.service.deleteModem({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          model: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/simCards")
  @ApiNestedQuery(SimCardFindManyArgs)
  async findSimCards(
    @common.Req() request: Request,
    @common.Param() params: ModemWhereUniqueInput
  ): Promise<SimCard[]> {
    const query = plainToClass(SimCardFindManyArgs, request.query);
    const results = await this.service.findSimCards(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        phoneNumber: true,

        modem: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/simCards")
  async connectSimCards(
    @common.Param() params: ModemWhereUniqueInput,
    @common.Body() body: SimCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simCards: {
        connect: body,
      },
    };
    await this.service.updateModem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/simCards")
  async updateSimCards(
    @common.Param() params: ModemWhereUniqueInput,
    @common.Body() body: SimCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simCards: {
        set: body,
      },
    };
    await this.service.updateModem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/simCards")
  async disconnectSimCards(
    @common.Param() params: ModemWhereUniqueInput,
    @common.Body() body: SimCardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simCards: {
        disconnect: body,
      },
    };
    await this.service.updateModem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
